name: Main Foodgram workflow

on:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Test with flake8
        run: |
          python -m flake8 backend/
  build_and_push_backend_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: stigos/foodgram_backend:latest
  build_and_push_frontend_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: stigos/foodgram_frontend:latest
  build_and_push_nginx_to_docker_hub:
    name: Push nginx Docker image to DockerHub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: stigos/foodgram_nginx:latest
  deploy:
    runs-on: ubuntu-latest
    needs:
      # Дождёмся билда всех образов Foodgram.
      - build_and_push_backend_to_docker_hub
      - build_and_push_frontend_to_docker_hub
      - build_and_push_nginx_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        # Передаём параметры для action appleboy/scp-action
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.production.yml"
          target: "foodgram"
      - name: Copy nginx.conf to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/nginx.conf"
          target: "foodgram"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          # Параметр script передаёт в action appleboy/ssh-action команды
          # которые нужно выполнить на сервере...
          script: |
            cd foodgram/infra
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
